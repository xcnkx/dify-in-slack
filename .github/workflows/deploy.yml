name: Deploy Prod
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    environment: deploy app agent
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Install Serverless Framework
      run: npm install -g serverless
    - name: Install Serverless Python Requirements Plugin
      run: sls plugin install -n serverless-python-requirements
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli jq
    # AWS CLIにキーを設定をする
    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    - name: Deploy Lambda functions
      id: deploy
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        SERVERLESS_ORG_NAME: ${{ secrets.SERVERLESS_ORG_NAME }}
        PROD_SLACK_APP_TOKEN: ${{ secrets.PROD_SLACK_APP_TOKEN }}
        PROD_SLACK_BOT_TOKEN: ${{ secrets.PROD_SLACK_BOT_TOKEN }}
        PROD_SLACK_SIGNING_SECRET: ${{ secrets.PROD_SLACK_SIGNING_SECRET }}
        DIFY_APP_API_KEY: ${{ secrets.DIFY_APP_API_KEY }}
      run: |
        sls deploy --stage prod --verbose > ./deployment_output.txt
        - name: Extract HttpApiUrl from CloudFormation
        id: extract-http-api-url
        run: |
          HttpApiUrl=$(aws cloudformation describe-stacks --stack-name aws-lambda-dify-slack-bolt-prod \
            --query "Stacks[0].Outputs" --output json | jq -r '.[] | select(.OutputKey == "HttpApiUrl") | .OutputValue')
          if [ -z "$HttpApiUrl" ]; then
            echo "HttpApiUrl not found in CloudFormation Outputs." >&2
            exit 1
          fi
          echo "API_ENDPOINT=$HttpApiUrl" >> $GITHUB_ENV
    - name: Comment on PR with API URL
      uses: actions/github-script@v6
      with:
          script: |
            const apiEndpoint = process.env.API_ENDPOINT;
            const prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              console.log("No pull request found. Skipping comment.");
              return;
            }
            const commentBody = `🚀 Deployment Successful! The API endpoint is:\n\n\`${apiEndpoint}\``;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody,
            });
      env:
          API_ENDPOINT: ${{ env.API_ENDPOINT }} 